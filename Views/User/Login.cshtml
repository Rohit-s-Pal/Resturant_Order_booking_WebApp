@model Estonia.Models.UserLoginModel


@{
    ViewData["Title"] = "Log-In";
}



         
    </div>
    <!-- Navbar & Hero End -->
    <!-- Service Start -->
    <div class="container-xxl py-5">
        <div class="container">
      
            <div class="login-container">
                <h2>Login</h2>
                <form id="login-form">
                    <div>
                        <label for="username">Username</label>
                        <input type="text" id="username" required>
                    </div>
                    <div>
                        <label for="password">Password</label>
                        <input type="password" id="password" required>
                    </div>
                    <button type="submit">Login</button>
                </form>
            </div>


        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger mt-3">@ViewBag.ErrorMessage</div>
        }

        <script>
            document.getElementById("login-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const username = document.getElementById("username").value.trim();
                const password = document.getElementById("password").value;
                const apiUrl = '/user/login'; // Relative path is better

                try {
                    // Show loading state
                    const submitBtn = e.target.querySelector('button[type="submit"]');
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Logging in...';

                    const response = await fetch(apiUrl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            username: username,
                            password: password
                        })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        console.log("Response is OK");

                        console.log("Raw response data:", data); // Log entire response to debug

                        if (data.token) {
                            console.log("Token received:", data.token); // Ensure this logs

                            // Store tokens
                            localStorage.setItem("access_token", data.token);
                            localStorage.setItem("user_name", data.userName);
                            if (data.refreshToken) {
                                localStorage.setItem("refresh_token", data.refreshToken);
                            }

                            // Redirect to home page
                            window.location.href = "/"; // Adjust to your home route
                        } else {
                            throw new Error("No token received");
                        }
                    } else {
                        throw new Error(data.message || "Login failed");
                    }
                } catch (error) {
                    console.error("Login error:", error);
                    alert(error.message);
                } finally {
                    // Reset button state
                    const submitBtn = e.target.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Login';
                    }
                }
            });
        </script>




        </div>
    </div>
    <!-- Service End -->
  