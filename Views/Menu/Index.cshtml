@model Estonia.Models.MenuViewModel

@{
    ViewData["Title"] = "AP Resturant";
}



        <div class="container-xxl py-5 bg-dark hero-header mb-5">
            <div class="container text-center my-5 pt-5 pb-4">
                <h1 class="display-3 text-white mb-3 animated slideInDown">Food Menu</h1>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb justify-content-center text-uppercase">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item"><a href="#">Pages</a></li>
                        <li class="breadcrumb-item text-white active" aria-current="page">Menu</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <!-- Navbar & Hero End -->




    <!-- Menu Start -->
    <div class="container-xxl py-5">
        <div class="container">
            <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
                <h5 class="section-title ff-secondary text-center text-primary fw-normal">Food Menu</h5>
                <h1 class="mb-5">Most Popular Items</h1>
            </div>
            <div class="tab-class text-center wow fadeInUp" data-wow-delay="0.1s">


                <!-- Category Slider -->
                <div class="category-slider-container">
                    <div class="category-slider-wrapper">
                        <button class="category-slider-btn category-prev-btn" id="category-prev-btn">&#10094;</button>
                        <div class="category-slider" id="category-slider">

                                   @foreach (var type in Model.MenuTypes)
                             {


                                  <!-- Static categories with tab href structure -->
                               <div class="category-slide" data-menutypeid="@type.MenuTypeId">
                                    <a class="d-flex align-items-center text-start mx-3 ms-0 pb-3"
                                       data-bs-toggle="pill" href="#tab-@type.MenuTypeId">
                                    <i class="fa fa-hamburger fa-2x text-primary"></i>
                                        <div class="ps-3">
                                            <small class="text-body">Special</small>
                                            <h6 class="mt-n1 mb-0">@type.Name</h6>
                                        </div>
                                    </a>
                                </div>
                              }

                    </div>
                    <button class="category-slider-btn category-next-btn" id="category-next-btn">&#10095;</button>
                </div>
                <div class="category-slider-dots" id="category-dots-container">
                    <!-- Dots will be added dynamically -->
                </div>
            </div>
                




            <style>
                

/* Base Styles */
body {
    font-family: 'Nunito', sans-serif;
    overflow-x: hidden;
}

/* Category Slider Styles */
.category-slider-container {
    position: relative;
    width: 100%;
    margin: 30px 0;
    overflow: hidden;
    height: auto;
    padding: 10px 0;
}

.category-slider-wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
}

.category-slider {
    display: flex;
    transition: transform 0.5s ease;
    will-change: transform;
    padding: 10px 0;
}

.category-slide {
    flex: 0 0 auto;
    width: 180px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    color: #333;
    font-weight: bold;
    padding: 15px;
    text-align: center;
    background: #f8f9fa;
    margin: 0 5px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s;
    border: 1px solid #eee;
}

    .category-slide:hover {
        background: #FEA116;
        color: white;
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .category-slide.active {
        background: #FEA116;
        color: white;
    }

    .category-slide i {
        font-size: 24px;
        margin-bottom: 10px;
    }

.category-slider-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(254, 161, 22, 0.8);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    cursor: pointer;
    font-size: 18px;
    z-index: 10;
    border-radius: 50%;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
}

    .category-slider-btn:hover {
        background-color: #FEA116;
        transform: translateY(-50%) scale(1.1);
    }

.category-prev-btn {
    left: 0;
}

.category-next-btn {
    right: 0;
}

.category-slider-dots {
    position: relative;
    text-align: center;
    margin-top: 15px;
}

.category-dot {
    display: inline-block;
    width: 10px;
    height: 10px;
    background-color: rgba(254, 161, 22, 0.3);
    border-radius: 50%;
    margin: 0 5px;
    cursor: pointer;
    transition: all 0.3s;
}

    .category-dot:hover {
        transform: scale(1.2);
    }

    .category-dot.active {
        background-color: #FEA116;
        transform: scale(1.2);
    }

/* Menu Item Styles */
.menu-item {
    margin-bottom: 30px;
    transition: all 0.3s;
    display: none; /* Hidden by default, shown when category selected */
}

    .menu-item.show {
        display: block;
    }

/* Responsive Adjustments */
@@media (max-width: 768px) {
    .category-slide {
        width: 140px;
        padding: 10px;
    }

        .category-slide i {
            font-size: 20px;
        }

    .category-slider-btn {
        width: 30px;
        height: 30px;
        font-size: 16px;
    }
}

@@media (max-width: 576px) {
    .category-slide {
        width: 120px;
        font-size: 14px;
    }

        .category-slide i {
            font-size: 18px;
        }
}


            </style>


            <script>

                document.addEventListener('DOMContentLoaded', function () {
                    function initCategorySlider() {
                        const slider = document.getElementById('category-slider');
                        const prevBtn = document.getElementById('category-prev-btn');
                        const nextBtn = document.getElementById('category-next-btn');
                        const dotsContainer = document.getElementById('category-dots-container');
                        const slides = Array.from(document.querySelectorAll('.category-slide'));
                        const menuItems = Array.from(document.querySelectorAll('.menu-item'));

                        let currentSlide = 0;
                        let slidesPerView = calculateSlidesPerView();

                        function calculateSlidesPerView() {
                            if (window.innerWidth < 576) return 2;
                            if (window.innerWidth < 768) return 3;
                            if (window.innerWidth < 992) return 4;
                            return 5;
                        }

                        function updateSlider() {
                            const slideWidth = slides[0].offsetWidth + 10;
                            const translateX = -currentSlide * slideWidth;
                            slider.style.transform = `translateX(${translateX}px)`;
                            updateDots();
                        }

                        function updateDots() {
                            dotsContainer.innerHTML = '';
                            const dotCount = Math.ceil(slides.length / slidesPerView);

                            for (let i = 0; i < dotCount; i++) {
                                const dot = document.createElement('span');
                                dot.className = 'category-dot';
                                if (i === Math.floor(currentSlide / slidesPerView)) {
                                    dot.classList.add('active');
                                }
                                dot.addEventListener('click', () => {
                                    currentSlide = i * slidesPerView;
                                    updateSlider();
                                });
                                dotsContainer.appendChild(dot);
                            }
                        }

                        function filterMenuItems(menuTypeId) {
                            // Hide all menu items
                            menuItems.forEach(item => {
                                item.classList.remove('show');
                            });

                            // Show items matching the selected category
                            document.querySelectorAll(`.menu-item[data-menutypeid="${menuTypeId}"]`).forEach(item => {
                                item.classList.add('show');
                            });
                        }

                        function nextSlide() {
                            if (currentSlide < slides.length - slidesPerView) {
                                currentSlide++;
                                updateSlider();
                            }
                        }

                        function prevSlide() {
                            if (currentSlide > 0) {
                                currentSlide--;
                                updateSlider();
                            }
                        }

                        // Event listeners
                        nextBtn.addEventListener('click', nextSlide);
                        prevBtn.addEventListener('click', prevSlide);

                        // Handle category selection
                        slides.forEach((slide, index) => {
                            const link = slide.querySelector('a');

                            link.addEventListener('click', (e) => {
                                // Prevent default if we're handling the filtering ourselves
                                e.preventDefault();

                                // Update active state
                                slides.forEach(s => {
                                    const sLink = s.querySelector('a');
                                    sLink.classList.remove('active', 'ms-0', 'pb-3');
                                    sLink.classList.add('pb-3');
                                });

                                link.classList.add('active', 'ms-0', 'pb-3');
                                link.classList.remove('pb-3');

                                // Filter menu items
                                const menuTypeId = slide.getAttribute('data-menutypeid');
                                filterMenuItems(menuTypeId);

                                // Update slider position if needed
                                currentSlide = index;
                                updateSlider();
                            });
                        });

                        // Handle window resize
                        window.addEventListener('resize', () => {
                            const newSlidesPerView = calculateSlidesPerView();
                            if (newSlidesPerView !== slidesPerView) {
                                slidesPerView = newSlidesPerView;
                                currentSlide = Math.min(currentSlide, slides.length - slidesPerView);
                                updateSlider();
                            }
                        });

                        // Initialize
                        updateSlider();

                        // Show breakfast items by default
                        filterMenuItems('1');
                    }

                    // Initialize the slider
                    initCategorySlider();
                });


            </script>

                
                <div class="tab-content">
                @foreach (var type in Model.MenuTypes)
                {
                    <div id="tab-@type.MenuTypeId" class="tab-pane fade show p-0 @(type == Model.MenuTypes.First() ? "active" : "")">
                        <div class="row g-4">
                            @foreach (var item in Model.MenuItems.Where(m => m.MenuTypeId == type.MenuTypeId))
                            {
                                <div class="col-lg-6">
                                    <div class="d-flex align-items-center">
                                        <img class="flex-shrink-0 img-fluid rounded" src="@item.ImageURL" alt="@item.Name" style="width: 80px;">
                                        <div class="w-100 d-flex flex-column text-start ps-4">
                                            <h5 class="d-flex justify-content-between border-bottom pb-2">
                                                <span>@item.Name</span>
                                                <span class="text-primary">$@item.Price</span>
                                            </h5>
                                            <small class="fst-italic">@item.Notes</small>

                                            <button class="btn btn-primary btn-sm add-to-cart-btn" data-name="@item.Name" data-price="@item.Price" data-image="img/menu-1.jpg">
                                                <i class="fa fa-cart-plus me-1"></i> Add to Cart
                                            </button>

                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                
                </div>
           
            
            
            </div>
        </div>
    </div>
    <!-- Menu End -->
<!-- Cart Page -->
<div class="cart-page" id="cart-page">
    <div class="cart-content">
        <button class="close-cart" id="close-cart" aria-label="Close cart">Close</button>
        <h2 class="mb-4"><i class="fas fa-shopping-cart me-2"></i>Your Order</h2>
        <div id="cart-items">
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <h5>Your cart is empty</h5>
                <p>Add some delicious items to get started!</p>
            </div>
        </div>
        <div class="total-price">Total: $<span id="cart-total">0.00</span></div>
        <button class="cart-order-btn" id="cart-order-btn" disabled>Place Order</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let cart = [];



        let tabLinks = document.querySelectorAll('[data-bs-toggle="pill"]');

        tabLinks.forEach(link => {
            link.addEventListener("click", function (event) {
                event.preventDefault();
                let tabId = this.getAttribute("href");

                // Remove 'active' class from all tab links and content
                document.querySelectorAll(".tab-pane").forEach(tab => tab.classList.remove("active", "show"));
                document.querySelectorAll('[data-bs-toggle="pill"]').forEach(link => link.classList.remove("active"));

                // Activate the clicked tab
                this.classList.add("active");
                document.querySelector(tabId).classList.add("active", "show");
            });
        });



        const cartToggle = document.getElementById('cart-toggle');
        const cartPage = document.getElementById('cart-page');
        const closeCart = document.getElementById('close-cart');
        const cartItems = document.getElementById('cart-items');
        const cartCount = document.getElementById('cart-count');
        const cartTotal = document.getElementById('cart-total');
        const cartOrderBtn = document.getElementById('cart-order-btn');
        const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');

        function updateCart() {
            cartItems.innerHTML = '';
            let total = 0;
            let itemCount = 0;

            if (cart.length === 0) {
                cartItems.innerHTML = '<p>Your cart is empty</p>';
            } else {
                cart.forEach((item, index) => {
                    const itemTotal = (item.price * item.quantity).toFixed(2);
                    total += parseFloat(itemTotal);
                    itemCount += item.quantity;

                    cartItems.innerHTML += `
                        <div class="cart-item">
                            <div>
                                <img src="${item.image}" alt="${item.name}" style="width: 50px; height: 50px; object-fit: cover; margin-right: 10px;">
                                <span>${item.name}</span>
                            </div>
                            <div class="cart-quantity-control">
                                <button class="qty-btn" onclick="changeCartQuantity(${index}, -1)">-</button>
                                <span style="margin: 0 10px">${item.quantity}</span>
                                <button class="qty-btn" onclick="changeCartQuantity(${index}, 1)">+</button>
                            </div>
                            <span>$${itemTotal}</span>
                        </div>
                    `;
                });
            }

            cartCount.textContent = itemCount;
            cartTotal.textContent = total.toFixed(2);
            cartOrderBtn.disabled = cart.length === 0;
        }

        window.changeCartQuantity = function (index, change) {
            let newQty = cart[index].quantity + change;
            if (newQty < 1) {
                cart.splice(index, 1);
            } else {
                cart[index].quantity = newQty;
            }
            updateCart();
        }

        addToCartButtons.forEach(button => {
            button.addEventListener('click', function () {
                const name = this.getAttribute('data-name');
                const price = parseFloat(this.getAttribute('data-price'));
                const image = this.getAttribute('data-image');

                const existingItemIndex = cart.findIndex(item => item.name === name);
                if (existingItemIndex >= 0) {
                    cart[existingItemIndex].quantity += 1;
                } else {
                    cart.push({ name, price, image, quantity: 1 });
                }
                updateCart();
            });
        });

        cartToggle.addEventListener('click', () => cartPage.style.display = 'block');
        closeCart.addEventListener('click', () => cartPage.style.display = 'none');

        cartPage.addEventListener('click', (e) => {
            if (e.target === cartPage) cartPage.style.display = 'none';
        });

        cartOrderBtn.addEventListener('click', function () {
            if (cart.length > 0) {
                const token = localStorage.getItem("access_token");

                if (!token) {
                    alert("You are not authenticated. Please log in first.");
                    return;
                }

                fetch('/Menu/PlaceOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token  // ✅ Add token here
                    },
                    body: JSON.stringify(cart)
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text || "Unknown error"); });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.OrderId) {
                            alert(`Order placed successfully! Order ID: ${data.OrderId}`);
                            cart = [];
                            updateCart();
                            cartPage.style.display = 'none';
                        } else {
                            alert("Failed to place order. Please try again.");
                        }
                    })
                    .catch(error => {
                        console.error('Error placing order:', error);
                        alert("Error placing order: " + error.message);
                    });
            } else {
                alert("Your cart is empty!");
            }
        });



        updateCart();


    });

</script>

 

