@model Estonia.Models.MenuViewModel

@{
    ViewData["Title"] = "AP Resturant";
}



        <div class="container-xxl py-5 bg-dark hero-header mb-5">
            <div class="container text-center my-5 pt-5 pb-4">
                <h1 class="display-3 text-white mb-3 animated slideInDown">Food Menu</h1>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb justify-content-center text-uppercase">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item"><a href="#">Pages</a></li>
                        <li class="breadcrumb-item text-white active" aria-current="page">Menu</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <!-- Navbar & Hero End -->




    <!-- Menu Start -->
    <div class="container-xxl py-5">
        <div class="container">
            <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
                <h5 class="section-title ff-secondary text-center text-primary fw-normal">Food Menu</h5>
                <h1 class="mb-5">Most Popular Items</h1>
            </div>
            <div class="tab-class text-center wow fadeInUp" data-wow-delay="0.1s">
                <ul class="nav nav-pills d-inline-flex justify-content-center border-bottom mb-5">
                    

                      @foreach (var type in Model.MenuTypes)
                {

                    <li class="nav-item">
                        <a class="d-flex align-items-center text-start mx-3 @(type == Model.MenuTypes.First() ? "ms-0 pb-3 active" : "pb-3")"
                           data-bs-toggle="pill" href="#tab-@type.MenuTypeId">
                            <i class="fa fa-utensils fa-2x text-primary"></i>
                            <div class="ps-3">
                                <small class="text-body">Special</small>
                                <h6 class="mt-n1 mb-0">@type.Name</h6>
                            </div>
                        </a>
                    </li>
                }
                   



                </ul>
                <div class="tab-content">
                @foreach (var type in Model.MenuTypes)
                {
                    <div id="tab-@type.MenuTypeId" class="tab-pane fade show p-0 @(type == Model.MenuTypes.First() ? "active" : "")">
                        <div class="row g-4">
                            @foreach (var item in Model.MenuItems.Where(m => m.MenuTypeId == type.MenuTypeId))
                            {
                                <div class="col-lg-6">
                                    <div class="d-flex align-items-center">
                                        <img class="flex-shrink-0 img-fluid rounded" src="@item.ImageURL" alt="@item.Name" style="width: 80px;">
                                        <div class="w-100 d-flex flex-column text-start ps-4">
                                            <h5 class="d-flex justify-content-between border-bottom pb-2">
                                                <span>@item.Name</span>
                                                <span class="text-primary">$@item.Price</span>
                                            </h5>
                                            <small class="fst-italic">@item.Notes</small>

                                            <button class="btn btn-primary btn-sm add-to-cart-btn" data-name="@item.Name" data-price="@item.Price" data-image="img/menu-1.jpg">
                                                <i class="fa fa-cart-plus me-1"></i> Add to Cart
                                            </button>

                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                
                </div>
            </div>
        </div>
    </div>
    <!-- Menu End -->
<!-- Cart Page -->
<div class="cart-page" id="cart-page">
    <div class="cart-content">
        <button class="close-cart" id="close-cart">Close</button>
        <h2>Shopping Cart</h2>
        <div id="cart-items"></div>
        <div class="total-price">Cart Total: $<span id="cart-total">0.00</span></div>
        <button class="cart-order-btn" id="cart-order-btn">Order Now</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let cart = [];

        const cartToggle = document.getElementById('cart-toggle');
        const cartPage = document.getElementById('cart-page');
        const closeCart = document.getElementById('close-cart');
        const cartItems = document.getElementById('cart-items');
        const cartCount = document.getElementById('cart-count');
        const cartTotal = document.getElementById('cart-total');
        const cartOrderBtn = document.getElementById('cart-order-btn');
        const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');

        function updateCart() {
            cartItems.innerHTML = '';
            let total = 0;
            let itemCount = 0;

            if (cart.length === 0) {
                cartItems.innerHTML = '<p>Your cart is empty</p>';
            } else {
                cart.forEach((item, index) => {
                    const itemTotal = (item.price * item.quantity).toFixed(2);
                    total += parseFloat(itemTotal);
                    itemCount += item.quantity;

                    cartItems.innerHTML += `
                        <div class="cart-item">
                            <div>
                                <img src="${item.image}" alt="${item.name}" style="width: 50px; height: 50px; object-fit: cover; margin-right: 10px;">
                                <span>${item.name}</span>
                            </div>
                            <div class="cart-quantity-control">
                                <button class="qty-btn" onclick="changeCartQuantity(${index}, -1)">-</button>
                                <span style="margin: 0 10px">${item.quantity}</span>
                                <button class="qty-btn" onclick="changeCartQuantity(${index}, 1)">+</button>
                            </div>
                            <span>$${itemTotal}</span>
                        </div>
                    `;
                });
            }

            cartCount.textContent = itemCount;
            cartTotal.textContent = total.toFixed(2);
            cartOrderBtn.disabled = cart.length === 0;
        }

        window.changeCartQuantity = function (index, change) {
            let newQty = cart[index].quantity + change;
            if (newQty < 1) {
                cart.splice(index, 1);
            } else {
                cart[index].quantity = newQty;
            }
            updateCart();
        }

        addToCartButtons.forEach(button => {
            button.addEventListener('click', function () {
                const name = this.getAttribute('data-name');
                const price = parseFloat(this.getAttribute('data-price'));
                const image = this.getAttribute('data-image');

                const existingItemIndex = cart.findIndex(item => item.name === name);
                if (existingItemIndex >= 0) {
                    cart[existingItemIndex].quantity += 1;
                } else {
                    cart.push({ name, price, image, quantity: 1 });
                }
                updateCart();
            });
        });

        cartToggle.addEventListener('click', () => cartPage.style.display = 'block');
        closeCart.addEventListener('click', () => cartPage.style.display = 'none');

        cartPage.addEventListener('click', (e) => {
            if (e.target === cartPage) cartPage.style.display = 'none';
        });

        cartOrderBtn.addEventListener('click', function () {
            if (cart.length > 0) {
                const token = localStorage.getItem("access_token");

                if (!token) {
                    alert("You are not authenticated. Please log in first.");
                    return;
                }

                fetch('/Menu/PlaceOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token  // ✅ Add token here
                    },
                    body: JSON.stringify(cart)
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text || "Unknown error"); });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.OrderId) {
                            alert(`Order placed successfully! Order ID: ${data.OrderId}`);
                            cart = [];
                            updateCart();
                            cartPage.style.display = 'none';
                        } else {
                            alert("Failed to place order. Please try again.");
                        }
                    })
                    .catch(error => {
                        console.error('Error placing order:', error);
                        alert("Error placing order: " + error.message);
                    });
            } else {
                alert("Your cart is empty!");
            }
        });



        updateCart();
    });

</script>
